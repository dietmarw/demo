class freeFOClib.Machines.Components.SpacePhasorM_flat "Physical transformation: multi phase <-> space phasors"
  parameter Integer m(min = 1) = 4 "Number of phases";
  parameter Real turnsRatio = 1.0 "Turns ratio";
  parameter Real TransformationMatrix[1,1] = 2.0 / /*Real*/(m);
  parameter Real TransformationMatrix[1,2] = cos(6.283185307179586 / /*Real*/(m)) * 2.0 / /*Real*/(m);
  parameter Real TransformationMatrix[1,3] = cos(12.56637061435917 / /*Real*/(m)) * 2.0 / /*Real*/(m);
  parameter Real TransformationMatrix[1,4] = cos(18.84955592153876 / /*Real*/(m)) * 2.0 / /*Real*/(m);
  parameter Real TransformationMatrix[2,1] = 0.0;
  parameter Real TransformationMatrix[2,2] = sin(6.283185307179586 / /*Real*/(m)) * 2.0 / /*Real*/(m);
  parameter Real TransformationMatrix[2,3] = sin(12.56637061435917 / /*Real*/(m)) * 2.0 / /*Real*/(m);
  parameter Real TransformationMatrix[2,4] = sin(18.84955592153876 / /*Real*/(m)) * 2.0 / /*Real*/(m);
  parameter Real InverseTransformation[1,1] = 1.0;
  parameter Real InverseTransformation[1,2] = -0.0;
  parameter Real InverseTransformation[2,1] = cos(-6.283185307179586 / /*Real*/(m));
  parameter Real InverseTransformation[2,2] = -sin(-6.283185307179586 / /*Real*/(m));
  parameter Real InverseTransformation[3,1] = cos(-12.56637061435917 / /*Real*/(m));
  parameter Real InverseTransformation[3,2] = -sin(-12.56637061435917 / /*Real*/(m));
  parameter Real InverseTransformation[4,1] = cos(-18.84955592153876 / /*Real*/(m));
  parameter Real InverseTransformation[4,2] = -sin(-18.84955592153876 / /*Real*/(m));
  parameter Integer plug_p.m(min = 1) = m "Number of phases";
  Real plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real plug_p.pin[4].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real plug_p.pin[4].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Integer plug_n.m(min = 1) = m "Number of phases";
  Real plug_n.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real plug_n.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real plug_n.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real plug_n.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real plug_n.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real plug_n.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real plug_n.pin[4].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real plug_n.pin[4].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Integer resistor.m(min = 1) = m "Number of phases";
  parameter Boolean resistor.useHeatPort = false "=true, if all HeatPorts are enabled";
  Real resistor.v[1](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
  Real resistor.v[2](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
  Real resistor.v[3](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
  Real resistor.v[4](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
  Real resistor.i[1](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
  Real resistor.i[2](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
  Real resistor.i[3](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
  Real resistor.i[4](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
  parameter Integer resistor.plug_p.m(min = 1) = resistor.m "Number of phases";
  Real resistor.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.plug_p.pin[4].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.plug_p.pin[4].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Integer resistor.plug_n.m(min = 1) = resistor.m "Number of phases";
  Real resistor.plug_n.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.plug_n.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.plug_n.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.plug_n.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.plug_n.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.plug_n.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.plug_n.pin[4].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.plug_n.pin[4].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Integer resistor.mh(min = 1) = resistor.m "Number of heatPorts=number of phases";
  parameter Real resistor.R[1](quantity = "Resistance", unit = "Ohm", start = 1.0) = 1.0 "Resistances R_ref at temperatures T_ref";
  parameter Real resistor.R[2](quantity = "Resistance", unit = "Ohm", start = 1.0) = 1.0 "Resistances R_ref at temperatures T_ref";
  parameter Real resistor.R[3](quantity = "Resistance", unit = "Ohm", start = 1.0) = 1.0 "Resistances R_ref at temperatures T_ref";
  parameter Real resistor.R[4](quantity = "Resistance", unit = "Ohm", start = 1.0) = 1.0 "Resistances R_ref at temperatures T_ref";
  parameter Real resistor.T_ref[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Reference temperatures";
  parameter Real resistor.T_ref[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Reference temperatures";
  parameter Real resistor.T_ref[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Reference temperatures";
  parameter Real resistor.T_ref[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = 300.15 "Reference temperatures";
  parameter Real resistor.alpha[1](quantity = "LinearTemperatureCoefficient", unit = "1/K") = 0.0 "Temperature coefficients of resistances at reference temperatures";
  parameter Real resistor.alpha[2](quantity = "LinearTemperatureCoefficient", unit = "1/K") = 0.0 "Temperature coefficients of resistances at reference temperatures";
  parameter Real resistor.alpha[3](quantity = "LinearTemperatureCoefficient", unit = "1/K") = 0.0 "Temperature coefficients of resistances at reference temperatures";
  parameter Real resistor.alpha[4](quantity = "LinearTemperatureCoefficient", unit = "1/K") = 0.0 "Temperature coefficients of resistances at reference temperatures";
  parameter Real resistor.T[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T_ref[1] "Fixed device temperatures if useHeatPort = false";
  parameter Real resistor.T[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T_ref[2] "Fixed device temperatures if useHeatPort = false";
  parameter Real resistor.T[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T_ref[3] "Fixed device temperatures if useHeatPort = false";
  parameter Real resistor.T[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T_ref[4] "Fixed device temperatures if useHeatPort = false";
  Real resistor.resistor[1].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real resistor.resistor[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real resistor.resistor[1].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.resistor[1].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.resistor[1].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.resistor[1].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean resistor.resistor[1].useHeatPort = resistor.useHeatPort "=true, if HeatPort is enabled";
  parameter Real resistor.resistor[1].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T[1] "Fixed device temperature if useHeatPort = false";
  Real resistor.resistor[1].LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real resistor.resistor[1].T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real resistor.resistor[1].R(quantity = "Resistance", unit = "Ohm", start = 1.0) = resistor.R[1] "Resistance at temperature T_ref";
  parameter Real resistor.resistor[1].T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T_ref[1] "Reference temperature";
  parameter Real resistor.resistor[1].alpha(quantity = "LinearTemperatureCoefficient", unit = "1/K") = resistor.alpha[1] "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor.resistor[1].R_actual(quantity = "Resistance", unit = "Ohm") "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor.resistor[2].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real resistor.resistor[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real resistor.resistor[2].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.resistor[2].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.resistor[2].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.resistor[2].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean resistor.resistor[2].useHeatPort = resistor.useHeatPort "=true, if HeatPort is enabled";
  parameter Real resistor.resistor[2].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T[2] "Fixed device temperature if useHeatPort = false";
  Real resistor.resistor[2].LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real resistor.resistor[2].T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real resistor.resistor[2].R(quantity = "Resistance", unit = "Ohm", start = 1.0) = resistor.R[2] "Resistance at temperature T_ref";
  parameter Real resistor.resistor[2].T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T_ref[2] "Reference temperature";
  parameter Real resistor.resistor[2].alpha(quantity = "LinearTemperatureCoefficient", unit = "1/K") = resistor.alpha[2] "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor.resistor[2].R_actual(quantity = "Resistance", unit = "Ohm") "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor.resistor[3].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real resistor.resistor[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real resistor.resistor[3].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.resistor[3].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.resistor[3].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.resistor[3].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean resistor.resistor[3].useHeatPort = resistor.useHeatPort "=true, if HeatPort is enabled";
  parameter Real resistor.resistor[3].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T[3] "Fixed device temperature if useHeatPort = false";
  Real resistor.resistor[3].LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real resistor.resistor[3].T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real resistor.resistor[3].R(quantity = "Resistance", unit = "Ohm", start = 1.0) = resistor.R[3] "Resistance at temperature T_ref";
  parameter Real resistor.resistor[3].T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T_ref[3] "Reference temperature";
  parameter Real resistor.resistor[3].alpha(quantity = "LinearTemperatureCoefficient", unit = "1/K") = resistor.alpha[3] "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor.resistor[3].R_actual(quantity = "Resistance", unit = "Ohm") "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor.resistor[4].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
  Real resistor.resistor[4].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
  Real resistor.resistor[4].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.resistor[4].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  Real resistor.resistor[4].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
  Real resistor.resistor[4].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
  parameter Boolean resistor.resistor[4].useHeatPort = resistor.useHeatPort "=true, if HeatPort is enabled";
  parameter Real resistor.resistor[4].T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T[4] "Fixed device temperature if useHeatPort = false";
  Real resistor.resistor[4].LossPower(quantity = "Power", unit = "W") "Loss power leaving component via HeatPort";
  Real resistor.resistor[4].T_heatPort(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of HeatPort";
  parameter Real resistor.resistor[4].R(quantity = "Resistance", unit = "Ohm", start = 1.0) = resistor.R[4] "Resistance at temperature T_ref";
  parameter Real resistor.resistor[4].T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) = resistor.T_ref[4] "Reference temperature";
  parameter Real resistor.resistor[4].alpha(quantity = "LinearTemperatureCoefficient", unit = "1/K") = resistor.alpha[4] "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
  Real resistor.resistor[4].R_actual(quantity = "Resistance", unit = "Ohm") "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
equation
  assert(1.0 + resistor.resistor[1].alpha * (resistor.resistor[1].T_heatPort - resistor.resistor[1].T_ref) >= 1e-15, "Temperature outside scope of model!");
  resistor.resistor[1].R_actual = resistor.resistor[1].R * (1.0 + resistor.resistor[1].alpha * (resistor.resistor[1].T_heatPort - resistor.resistor[1].T_ref));
  resistor.resistor[1].v = resistor.resistor[1].R_actual * resistor.resistor[1].i;
  resistor.resistor[1].LossPower = resistor.resistor[1].v * resistor.resistor[1].i;
  resistor.resistor[1].v = resistor.resistor[1].p.v - resistor.resistor[1].n.v;
  0.0 = resistor.resistor[1].p.i + resistor.resistor[1].n.i;
  resistor.resistor[1].i = resistor.resistor[1].p.i;
  resistor.resistor[1].T_heatPort = resistor.resistor[1].T;
  assert(1.0 + resistor.resistor[2].alpha * (resistor.resistor[2].T_heatPort - resistor.resistor[2].T_ref) >= 1e-15, "Temperature outside scope of model!");
  resistor.resistor[2].R_actual = resistor.resistor[2].R * (1.0 + resistor.resistor[2].alpha * (resistor.resistor[2].T_heatPort - resistor.resistor[2].T_ref));
  resistor.resistor[2].v = resistor.resistor[2].R_actual * resistor.resistor[2].i;
  resistor.resistor[2].LossPower = resistor.resistor[2].v * resistor.resistor[2].i;
  resistor.resistor[2].v = resistor.resistor[2].p.v - resistor.resistor[2].n.v;
  0.0 = resistor.resistor[2].p.i + resistor.resistor[2].n.i;
  resistor.resistor[2].i = resistor.resistor[2].p.i;
  resistor.resistor[2].T_heatPort = resistor.resistor[2].T;
  assert(1.0 + resistor.resistor[3].alpha * (resistor.resistor[3].T_heatPort - resistor.resistor[3].T_ref) >= 1e-15, "Temperature outside scope of model!");
  resistor.resistor[3].R_actual = resistor.resistor[3].R * (1.0 + resistor.resistor[3].alpha * (resistor.resistor[3].T_heatPort - resistor.resistor[3].T_ref));
  resistor.resistor[3].v = resistor.resistor[3].R_actual * resistor.resistor[3].i;
  resistor.resistor[3].LossPower = resistor.resistor[3].v * resistor.resistor[3].i;
  resistor.resistor[3].v = resistor.resistor[3].p.v - resistor.resistor[3].n.v;
  0.0 = resistor.resistor[3].p.i + resistor.resistor[3].n.i;
  resistor.resistor[3].i = resistor.resistor[3].p.i;
  resistor.resistor[3].T_heatPort = resistor.resistor[3].T;
  assert(1.0 + resistor.resistor[4].alpha * (resistor.resistor[4].T_heatPort - resistor.resistor[4].T_ref) >= 1e-15, "Temperature outside scope of model!");
  resistor.resistor[4].R_actual = resistor.resistor[4].R * (1.0 + resistor.resistor[4].alpha * (resistor.resistor[4].T_heatPort - resistor.resistor[4].T_ref));
  resistor.resistor[4].v = resistor.resistor[4].R_actual * resistor.resistor[4].i;
  resistor.resistor[4].LossPower = resistor.resistor[4].v * resistor.resistor[4].i;
  resistor.resistor[4].v = resistor.resistor[4].p.v - resistor.resistor[4].n.v;
  0.0 = resistor.resistor[4].p.i + resistor.resistor[4].n.i;
  resistor.resistor[4].i = resistor.resistor[4].p.i;
  resistor.resistor[4].T_heatPort = resistor.resistor[4].T;
  resistor.v[1] = resistor.plug_p.pin[1].v - resistor.plug_n.pin[1].v;
  resistor.v[2] = resistor.plug_p.pin[2].v - resistor.plug_n.pin[2].v;
  resistor.v[3] = resistor.plug_p.pin[3].v - resistor.plug_n.pin[3].v;
  resistor.v[4] = resistor.plug_p.pin[4].v - resistor.plug_n.pin[4].v;
  resistor.i[1] = resistor.plug_p.pin[1].i;
  resistor.i[2] = resistor.plug_p.pin[2].i;
  resistor.i[3] = resistor.plug_p.pin[3].i;
  resistor.i[4] = resistor.plug_p.pin[4].i;
  assert(resistor.plug_p.m == plug_p.m, "automatically generated from connect");
  assert(resistor.plug_n.m == plug_n.m, "automatically generated from connect");
  plug_p.pin[4].i = 0.0;
  plug_p.pin[3].i = 0.0;
  plug_p.pin[2].i = 0.0;
  plug_p.pin[1].i = 0.0;
  plug_n.pin[4].i = 0.0;
  plug_n.pin[3].i = 0.0;
  plug_n.pin[2].i = 0.0;
  plug_n.pin[1].i = 0.0;
  (-plug_p.pin[4].i) + resistor.plug_p.pin[4].i = 0.0;
  (-plug_p.pin[3].i) + resistor.plug_p.pin[3].i = 0.0;
  (-plug_p.pin[2].i) + resistor.plug_p.pin[2].i = 0.0;
  (-plug_p.pin[1].i) + resistor.plug_p.pin[1].i = 0.0;
  (-plug_n.pin[4].i) + resistor.plug_n.pin[4].i = 0.0;
  (-plug_n.pin[3].i) + resistor.plug_n.pin[3].i = 0.0;
  (-plug_n.pin[2].i) + resistor.plug_n.pin[2].i = 0.0;
  (-plug_n.pin[1].i) + resistor.plug_n.pin[1].i = 0.0;
  (-resistor.plug_p.pin[4].i) + resistor.resistor[4].p.i = 0.0;
  resistor.resistor[4].n.i + (-resistor.plug_n.pin[4].i) = 0.0;
  (-resistor.plug_p.pin[3].i) + resistor.resistor[3].p.i = 0.0;
  resistor.resistor[3].n.i + (-resistor.plug_n.pin[3].i) = 0.0;
  (-resistor.plug_p.pin[2].i) + resistor.resistor[2].p.i = 0.0;
  resistor.resistor[2].n.i + (-resistor.plug_n.pin[2].i) = 0.0;
  (-resistor.plug_p.pin[1].i) + resistor.resistor[1].p.i = 0.0;
  resistor.resistor[1].n.i + (-resistor.plug_n.pin[1].i) = 0.0;
  resistor.plug_p.pin[1].v = resistor.resistor[1].p.v;
  resistor.plug_p.pin[2].v = resistor.resistor[2].p.v;
  resistor.plug_p.pin[3].v = resistor.resistor[3].p.v;
  resistor.plug_p.pin[4].v = resistor.resistor[4].p.v;
  resistor.plug_n.pin[1].v = resistor.resistor[1].n.v;
  resistor.plug_n.pin[2].v = resistor.resistor[2].n.v;
  resistor.plug_n.pin[3].v = resistor.resistor[3].n.v;
  resistor.plug_n.pin[4].v = resistor.resistor[4].n.v;
  plug_p.pin[1].v = resistor.plug_p.pin[1].v;
  plug_p.pin[2].v = resistor.plug_p.pin[2].v;
  plug_p.pin[3].v = resistor.plug_p.pin[3].v;
  plug_p.pin[4].v = resistor.plug_p.pin[4].v;
  plug_n.pin[1].v = resistor.plug_n.pin[1].v;
  plug_n.pin[2].v = resistor.plug_n.pin[2].v;
  plug_n.pin[3].v = resistor.plug_n.pin[3].v;
  plug_n.pin[4].v = resistor.plug_n.pin[4].v;
end freeFOClib.Machines.Components.SpacePhasorM_flat;
